#!/bin/bash

source ./utils.sh

# install_dir defaults to home
install_dir="${install_dir:-${HOME}}"
mkdir -p ${VERBOSE} "${install_dir}/bin" | log

# dotfiles - Location of this repository
dotfiles=${PWD}

CONFIG_DIR="${install_dir}/.config"

BASHDIR="${BASHDIR:-${CONFIG_DIR}/bash}"
BASHRC="${BASHRC:-${install_dir}/.bashrc}"
INPUTRC="${install_dir}/.inputrc"
NPMRC="${install_dir}/.npmrc"
NPM_PACKAGES="${HOME}/.npm-packages"
TMUX_DIR="${install_dir}/.tmux"
TMUX_CONF="${install_dir}/.tmux.conf"
VIMRC="${VIMRC:-${install_dir}/.vimrc}"
VIM_DIR="${VIM_DIR:-${install_dir}/.vim}"
ZLOGOUT="${ZLOGOUT:-${install_dir}/.zlogout}"
ZSHDIR="${ZSHDIR:-${CONFIG_DIR}/zsh}"
ZSHRC="${ZSHRC:-${install_dir}/.zshrc}"
ZSH_CUSTOM="${ZSHDIR}/custom"
TERMINFO="${CONFIG_DIR}/terminfo"

function prependFileWithCheck {
  if [ ! -e "$2" ] || ! grep -q 'configurations added by github.com/Jiggins/dotfiles' "$2"; then
    prependFile "$1" "$2"
  fi

  return 0
}

function linkfile() {
  local source=$1
  local destination=$2

  if [[ -L "${destination}" ]]; then
    return 0
  elif [[ -f "${destination}" ]] || [[ -d "${destination}" ]]; then
    mv -v "${destination}" "${destination}.bak"
    info "Original ${destination} moved to ${destination}.bak" | log -s
  fi

  {
    info "Linking ${source} to ${destination}"
    ln -s "${source}" "${destination}" \
      || { ret=$?; error "Could not symlink ${source} to ${destination}"; return $ret; }
  } | log -s;
  return $?
}

function checkDependency() {
  local -a missing

  for i in "$@"; do
    commandExists "$i" || missing+=( "$i" )
  done

  if [[ ${#missing[@]} -gt 0 ]]; then
    echo 'The following dependencies are not installed on this system' | log -s
    echo -e "\\n\\t${missing[*]}\\n" | log -s
    return 1
  fi

  return 0
}

bin_linked=

function linkbin() {
  # Only try to link files once
  [[ ${bin_linked} ]] && return 0

  info "Symlinking scripts to bin"
  for script in bin/*; do
    linkfile "${dotfiles}/${script}" "${install_dir}/bin/$(basename ${script})" | log -s
  done

  bin_linked=true
}

# Bash
function installBashCustomisation() {
  info "Writing bashrc to ${BASHRC}" | log -s
  prependFileWithCheck src/rcfiles/bashrc "${BASHRC}"

  linkbin

  # Bash completion for mac
  if [ "$(uname)" == "Darwin" ]; then
    if commandExists brew; then
      if ! brew ls --version bash-completion > /dev/null; then
        info "Installing bash completion for mac" | log -s
        brew install git bash-completion
      fi
    fi
  fi

  echo ""
}

function installGitCustomisation() {
  checkDependency git \
    || return $?

  linkfile "${dotfiles}/src/git_template" "${install_dir}/.git_template" \
    || return $?

  git config --global init.templatedir "${install_dir}/.git_template" | log -s
}

# GHCi
function installGHCiCustomisation() {
  checkDependency ghci || return 1
  #  Vi mode in ghci!
  linkfile "${dotfiles}/src/rcfiles/ghci" "${install_dir}/.ghci" | log

  info "Enabling Vi-mode in ghci" | log -s
  if ! grep -q "editMode vi" "${install_dir}/.haskeline"; then
    echo "editMode: Vi" >> "${install_dir}/.haskeline"
  fi
}

# NPM
function installNPMCustomisation() {
  checkDependency npm || return 1

  mkdir -p "${NPM_PACKAGES}"
  linkfile "${dotfiles}/src/rcfiles/npmrc" "${NPMRC}" | log
}

# Readline
function installReadlineCustomisation() {
  if [[ -e ${INPUTRC} ]]; then
    info "Writing inputrc to ${INPUTRC}" | log -s
    linkfile "${dotfiles}/src/rcfiles/inputrc" "${INPUTRC}" | log
  fi
}

# Ruby
function installRuby() {
  checkDependency ruby

  declare -a gems=(
    bundler
    openssl
    pry
    pry-byebug
    pry-inline
    pry-toys
    rubocop
    rubocop-performance
    yard
  )

  if ! command -v rvm > /dev/null; then
    info "Installing Ruby via rvm"
    gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB | log
    curl -sSL https://get.rvm.io | bash -s stable --ruby \
      || error "Failed to install rvm"
  fi

  info "Installing Ruby gems" | log -s
  gem install "${gems[@]}" | log

  yard config --gem-install-yri | log
}

# Vim
function installVimCustomisation() {
  checkDependency vim
  info "Writing vimrc to ${VIMRC}" | log -s
  prependFileWithCheck "${dotfiles}/src/rcfiles/vimrc" "${VIMRC}"

  echo "Copying vim scripts to ${VIM_DIR}" | log
  linkfile "${dotfiles}/src/vim" "${VIM_DIR}" 2>&1 | log

  # Installing or updating Vim plugins
  if [[ ! -d "${VIM_DIR}/bundle" ]]; then
    info "Installing vim plugins"
    vim -u "${VIMRC}" +qall \
      || error "Could not install vim plugins to ${VIM_DIR}/bundle" && return 1 | log -s
  else
    info "Updating vim plugins"
    vim -u "${VIMRC}" +PlugUpdate  +qall \
      || error "Could not update vim plugins in ${VIM_DIR}/bundle" | log -s
  fi

  if [[ ! -L "${install_dir}/bin/thesaurus-lookup.sh" ]]; then
    ln -fsv "${VIM_DIR}/bundle/vim-online-thesaurus/plugin/thesaurus-lookup.sh" "${install_dir}/bin/" | log
  fi
}

# Tmux

function installTmuxCustomisation() {
  checkDependency tmux || return 1

  linkbin

  linkfile "${dotfiles}/src/rcfiles/tmux.conf" "${TMUX_CONF}" | log
  linkfile "${dotfiles}/src/tmux" "${TMUX_DIR}" | log

  [[ -n "${TMUX}" ]] && tmux source "${TMUX_CONF}"
}

function installTerminfoCustomisation() {
  set -x
  linkfile "${dotfiles}/src/terminfo" "${TERMINFO}" | log

  find "${TERMINFO}/" -type f -exec tic -o "${HOME}/.terminfo" {} \;

  set +x
}


# Zsh
function installZSHCustomisation() {
  checkDependency zsh git

  linkbin

  info "Writing zshrc to ${ZSHRC}" | log -s
  linkfile "${dotfiles}/src/rcfiles/zshrc" "${ZSHRC}" | log

  info "Writing zlogout to ${ZLOGOUT}" | log -s
  linkfile "${dotfiles}/src/rcfiles/zlogout" "${ZLOGOUT}" | log

  info "Writing zsh dir to ${ZSHDIR}" | log -s
  linkfile "${dotfiles}/src/config/zsh" "${ZSHDIR}" | log
}

# Options
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -v|--verbose)
      VERBOSE='-v'
      ;;

    all)
      installBashCustomisation
      installGHCiCustomisation
      installNPMCustomisation
      installReadlineCustomisation
      installTerminfoCustomisation
      installTmuxCustomisation
      installVimCustomisation
      installZSHCustomisation
      ;;

    -d|--install-dir|--install-directory)
      install_dir="$2"
      shift
      ;;

    bash)
      installBashCustomisation
      ;;

    -b|--bashrc)
      BASHRC="$2"
      shift
      ;;

    --bashdir)
      BASHDIR="$2"
      shift
      ;;

    git)
      installGitCustomisation
      ;;

    ghci)
      installGHCiCustomisation
      ;;

    npm)
      installNPMCustomisation
      ;;

    readline)
      installReadlineCustomisation
      ;;

    ruby)
      installRuby
      ;;

    terminfo)
      installTerminfoCustomisation
      ;;

    tmux)
      installTmuxCustomisation
      ;;

    vim)
      installVimCustomisation
      ;;

    --vimrc)
      VIMRC="$2"
      shift
      ;;

    --vimdir)
      VIM_DIR="$2"
      ;;

    zsh)
      installZSHCustomisation
      ;;

    *)
      echo "Invalid argument $1"
      exit 128
      ;;
  esac
  shift # past argument or value
done

