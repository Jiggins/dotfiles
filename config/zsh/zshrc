# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Benchmark ZSH
zmodload zsh/zprof

# Vim configurations added by github.com/Jiggins/dotfiles

export GENCOMPL_FPATH="${HOME}/.config/zsh/completion"

# ZSH Options
COMPLETION_WAITING_DOTS="true"
ENABLE_CORRECTION="true"
HYPHEN_INSENSITIVE="true"

export ZSH_CONFIG_DIR="${HOME}/.config/zsh"

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

# Edit command line in $EDITOR
autoload -z edit-command-line
zle -N edit-command-line

# Prompt
fpath=( "${ZSH_CONFIG_DIR}" $fpath )
autoload -U promptinit
promptinit
prompt custom

# ZSH style
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# History options
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000
HIST_STAMPS="yyyy-mm-dd"

# Vi mode
bindkey -v

bindkey '^a' beginning-of-line
bindkey '^e' end-of-line
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
bindkey '^r' history-incremental-search-backward
bindkey -M vicmd v edit-command-line

# Stop ^w from deleting `/`
autoload -U select-word-style && select-word-style bash

# 10ms for key sequences
export KEYTIMEOUT=20

# Disable zsh correction on shell arguments
# $ which vim
# "zsh: correct 'vim' to '.vim' [nyae]?"
unsetopt correct_all

autoload predict-on

# adds a directory to the end of PATH if the directory exists
function addpath() {
  if [ -d "$1" ]; then
    path+=("$1")
    return 0
  fi

  return 1
}

# Prevent duplicate entries in $PATH
typeset -U path

path+=(
  "${HOME}/bin"
  "${HOME}/.local/bin"
  "${HOME}/.cargo/bin"
  "${HOME}/go/bin"
  "${HOME}/.npm-packages/bin"
  "${HOME}/.rvm/bin"
  "${HOME}/.vim/bundle/fzf/bin"
  "/usr/local/opt/ruby/bin"
  "/home/linuxbrew/.linuxbrew/bin"
  "/home/linuxbrew/.linuxbrew/sbin"
  "/usr/local/bin"
  "/usr/local/sbin"
  "/usr/local/opt/python/libexec/bin"
  "/usr/local/texlive/2016basic/bin/x86_64-darwin"
)

command -v gem > /dev/null && addpath "$(gem environment gemdir)/bin"
command -v python3 > /dev/null && addpath "$(python3 -m site --user-base)/bin"

# Solidify PATH changes for the rest of the shell sessions
export PATH

# zplug
export ZPLUG_HOME="${ZSH_CONFIG_DIR}/zplug"

if ! [[ -d "${ZPLUG_HOME}" ]]; then
  echo "Installing zplug"
  git clone https://github.com/zplug/zplug "${ZPLUG_HOME}"
fi

source "${ZPLUG_HOME}/init.zsh"

zplug 'zplug/zplug', hook-build:'zplug --self-manage'

zplug "RobSis/zsh-completion-generator"
zplug "junegunn/fzf-git.sh", use:"fzf-git.sh"
zplug "lib/completion", from:oh-my-zsh
zplug "reegnz/jq-zsh-plugin"
zplug "romkatv/powerlevel10k," as:theme, depth:1
zplug "srijanshetty/zsh-pandoc-completion"
zplug "supercrabtree/k"
zplug "svenXY/timewarrior"
zplug "trapd00r/LS_COLORS", hook-build:"dircolors -b LS_COLORS > c.zsh"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "zsh-vi-more/vi-motions"

zplug check || zplug install
zplug load

[ -f "${HOME}/.fzf.zsh" ]           && source "${HOME}/.fzf.zsh"
[ -f "${HOME}/.rvm/scripts/rvm" ]   && source "${HOME}/.rvm/scripts/rvm"
[ -f "/usr/local/rvm/scripts/rvm" ] && source /usr/local/rvm/scripts/rvm

bindkey '^j' jq-complete

# https://asdf-vm.com/guide/getting-started.html
if command -v brew 2>&1 > /dev/null && [[ -f $(brew --prefix asdf)/libexec/asdf.sh ]]; then
  .  $(brew --prefix asdf)/libexec/asdf.sh
fi

export EDITOR=$(which vim)
export LESS="SR"
export PASSWORD_STORE_ENABLE_EXTENSIONS=true

if command -v 'bat' >/dev/null; then
  alias cat='bat'
  export BAT_STYLE="grid,header"
  export HOMEBREW_BAT=1
fi

alias cgrep='grep --color=always'
alias focusfix='printf "\e[?1004l"'
alias gls='git ls-files'
alias isodate='date +%Y-%m-%d'
alias ll='ls -lh'
alias path='echo $PATH | sed "s/:/\n/g"'
alias tidy='tidy -quiet -indent'
alias tree='tree -C'

# Colours and text formatting
export BOLD=$(tput bold)
export RED=$(tput setaf 1)
export GREEN=$(tput setaf 2)
export YELLOW=$(tput setaf 3)
export BLUE=$(tput setaf 3)
export RESET=$(tput sgr0)
export CLEARLN="\r$(tput el)"

# Common regex
export re_IP='\b([0-9]{1,3}\.){3}[0-9]{1,3}\b'

if command -v pigz > /dev/null; then
  alias tarz='tar --use-compress-program=pigz'
fi

# https://github.com/nvbn/thefuck
if command -v thefuck > /dev/null; then
  eval $(thefuck --alias)
fi

# Load all scripts in .config/zsh/autoload
for file in ${ZSH_CONFIG_DIR}/autoload/*.zsh; do
  source "${file}"
done

# OS specific config
case "$(uname -s)" in
  Linux*)  source "${ZSH_CONFIG_DIR}/linux.zsh" ;;
  Darwin*) source "${ZSH_CONFIG_DIR}/macos.zsh" ;;
esac

# Local override
if [[ -f "${ZSH_CONFIG_DIR}/local.zsh" ]]; then
  source "${ZSH_CONFIG_DIR}/local.zsh"
fi

# Completion
fpath+=(~/.config/zsh/completion $fpath)
autoload -Uz compinit && compinit -i

# Codi
# Usage: codi [filetype] [filename]
function codi() {
  local syntax="${1:-python}"
  shift
  vim -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}

function compress() {
  if [[ -z "$1" ]]; then
    echo "usage: compress [files]"
    return 1
  fi

  tar -cf - "$@" | pigz | pv
}

function intercalate() {
  ghc -e "getContents >>= putStrLn . foldr1 (\a c -> a ++ \"${1}\" ++ c) . words"
}

# This should be done by `git init` but it does not work sometimes
function install-git-hooks() {
  [[ -d .git ]] \
    && rsync -Lav --delete ~/.git_template/hooks/ .git/hooks
}

function js() {
  jshon "$@" | pygmentize -l 'json'
}

# use vim ex commands in a UNIX pipe
function vp() {
    vim - -u NONE -es '+1' "+$*" '+%print' '+:qa!' | tail -n +2
}

# use vim normal mode commands in a UNIX pipe
function vn() {
    vim - -u NONE -es '+1' "+normal $*" '+%print' '+:qa!' | tail -n +2
}

function map() {
  while read i; do
    eval "$* $i"
  done
}

function man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

new-md() {
    local file="$(isodate)-${*// /-}.md"
    local length="${#$(echo $*)}"
    printf "${*}\n"               >> $file
    printf "=%.0s" {1..${length}} >> $file
    printf "\n\n"                 >> $file
    ${EDITOR} $file
}

function grep-after() {
  perl -nle 'print $& if m{(?<=${1}\s)\S+}'
}

# Join array with delimiter
# From https://stackoverflow.com/a/17841619
function join_by {
  local IFS="$1"
  shift
  echo "$*"
}

function remove-spaces() {
  for i in $1; do                                                                                                                                                                                                                            Â 
    if echo $i | grep -E ' ' > /dev/null; then
      echo "$i" "${i// /-}"
    fi
  done
}

function mmail() {
  pandoc --standalone --from markdown --to rtf --template bootstrap.rtf --output - $1 | pbcopy
}

function testItalics() {
  echo "$(tput sitm)italics$(tput ritm) $(tput smso)standout$(tput rmso)"
}

function timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 4); do time $shell -i -c exit; done
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

mkdir -p "${HOME}/logs/zsh"
zprof > "${HOME}/logs/zsh/benchmark"
